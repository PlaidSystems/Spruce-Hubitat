/**
 *  Spruce Controller wifi master *
 *  Copyright 2019 Plaid Systems
 *
 *	
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 -------------11-2019 update---------------
 * Spruce Controller wifi master control tile
 * Manual Schedule tiles
 * port to Hubitat
 *
 */
 
 metadata {
	definition (name: 'Spruce wifi master', namespace: 'plaidsystems', author: 'Plaid Systems') {
		capability "Switch"
        capability "Switch Level"        
        
        attribute "pause", "string"
        attribute "contact", "string"
        attribute "status", "string"
        attribute "message", "string"
        attribute "rainsensor", "string"        
        
        command "resume"
        command "pause"        
        command "updateSettings"
        
	}
    preferences {
    	input (description: "Use Level to set zone watering time. This setting does not effect scheduled water times.",
            displayDuringSetup: false, type: "paragraph", element: "paragraph", title: "Set Level")
        input (description: "Update the manual schedule child devices, go to Spruce Connect App to update zone settings from Spruce Cloud.", 
            displayDuringSetup: false, type: "paragraph", element: "paragraph", title: "Update Settings")
    }
}

def installed(){
	setLevel(10)
    setPause(off)
    setRain(off)
    sendEvent(name: "switch", value: "off", isStateChange: true)    //initialize switch to off
    
    updateChildren()
}

void updateSettings(){	   
    parent.getChildren()
}

def updateChildren(){
	log.debug "updateChildren master"
	//get and delete children avoids duplicate children
    
    try {
    	def children = getChildDevices()
        children.each{
        log.debug it
            if ("${it}" == "Spruce Pause") log.debug "found it"
        	deleteChildDevice(it.deviceNetworkId)
        }
    }
    catch (e) {
    	log.debug "no children"
        }
        
	parent.child_schedules(device.deviceNetworkId)
}

//add schedule child devices
void createScheduleDevices(id, i, schedule, schName){
	log.debug "master child devices"
    log.debug schedule    
    log.debug "${id}.${i}"
    
    //add children
    addChildDevice("plaidsystems", "Spruce wifi schedule", "${id}.${i}", [completedSetup: true, label: "${schName}", isComponent: true, name: "schedule${i}"])
}


def generateEvent(Map results) {
    def currentStatus = device.status//currentValue('status')
    log.debug "master status: ${currentStatus}"
    log.debug "master results: ${results}"
    
	//status dependent events
    if(currentStatus == 'active'){
        def messageCurrent = device.latestValue('message')
        def message = messageCurrent.split('\n')
        log.debug "message[0] ${message[0]}"
        sendEvent(name: "message", value: "${message[0]}\n${results.descriptionText}", displayed: false)
    }    
    else if (results.name == 'status'){
    	sendEvent(name: "${results.name}", value: "${results.value}", descriptionText: "${results.descriptionText}", displayed: true)
        sendEvent(name: "message", value: "${results.descriptionText}", displayed: false)
    }
    
	//all events     
    if (results.name == "rainsensor"){
        sendEvent(name: "${results.name}", value: "${results.value}", descriptionText: "${results.descriptionText}", displayed: true)
    }
    if (results.name == "pause"){
        sendEvent(name: "${results.name}", value: "${results.value}", descriptionText: "${results.descriptionText}", displayed: true)
        if(results.value == 'on')sendEvent(name: "status", value: "pause", displayed: false)
        if(results.value == 'off')sendEvent(name: "status", value: "active", displayed: false)
    }
    if (results.name == "switch"){
        if (results.value == "on") switchon(results)
        else off()
        sendEvent(name: "${results.name}", value: "${results.value}", descriptionText: "${results.descriptionText}", displayed: true)
        if(currentStatus != 'active')sendEvent(name: "message", value: "${results.descriptionText}", displayed: false)
    }
    if (results.name == "contact"){
        sendEvent(name: "${results.name}", value: "${results.value}", descriptionText: "${results.descriptionText}", displayed: true)
    } 

  
}

//set minutes
def setLevel(percent) {
	log.debug "setLevel: ${percent}"
	sendEvent(name: "level", value: percent, displayed: false)
}

//set rainSensor
def setRain(value) {
	log.debug "setRain: ${value}"
	sendEvent(name: "rainsensor", value: value, displayed: false)
}

//set Pause
def setPause(value) {
	log.debug "setPause: ${value}"
	sendEvent(name: "pause", value: value, displayed: false)
}


//************* Commands to/from pause and schedule children *******************
def zoneon(dni) {	
    log.debug "step 1"
   	def childDevice = childDevices.find{it.deviceNetworkId == dni}    
    
    if (childDevice.currentValue('switch') != 'on'){
    	log.debug "master zoneon ${childDevice} ${dni} on"
    	def result = [name: 'switch', value: 'on', descriptionText: "zone is on", isStateChange: true, displayed: true]    
    	childDevice.sendEvent(result)
        
        if("${childDevice}" != "Spruce Pause") parent.scheduleOnOff(childDevice, 1)
    	else pause()
    }
}

def zoneoff(dni) {    
    def childDevice = childDevices.find{it.deviceNetworkId == dni}
    
    if (childDevice.currentValue('switch') != 'off'){
    	log.debug "master zoneoff ${childDevice} off"
    	def result = [name: 'switch', value: 'off', descriptionText: "zone is off", isStateChange: true, displayed: true]
    	childDevice.sendEvent(result)
        
        if("${childDevice}" != "Spruce Pause") parent.scheduleOnOff(childDevice, 0)
    	else resume()
    }
}

void switchon(results){
	sendEvent(name: "status", value: 'active', descriptionText: "${results.descriptionText}", displayed: false)
}

void on(){
	def runtime = device.latestValue('level') * 60
	parent.runAll(runtime)
}

void off(){	
    sendEvent(name: "switch", value: 'off', descriptionText: "${device.label} is off", displayed: false)
    sendEvent(name: "status", value: 'ready', descriptionText: "${device.label} is off", displayed: true)
    sendEvent(name: "message", value: 'Idle', descriptionText: "${device.label} is off", displayed: false)
    allSchedulesOff()
    parent.send_stop()
}

void allSchedulesOff(){
	def children = getChildDevices()
    children.each { child ->        
        def result = [name: 'switch', value: 'off', descriptionText: "${child.displayName} is off", isStateChange: true, displayed: true]    
    	child.sendEvent(result)
    }    	
}

void pause(){
    sendEvent(name: "pause", value: 'on', descriptionText: "Pause", displayed: true)
    def childDevice = childDevices.find{"${it}" == "Spruce Pause"}
    childDevice?.sendEvent(name: "switch", value: 'on', descriptionText: "Pause", isStateChange: true, displayed: true)
    
    parent.send_pause()
}

void resume(){	
    sendEvent(name: "pause", value: 'off', descriptionText: "Resume", displayed: true)
    def childDevice = childDevices.find{"${it}" == "Spruce Pause"}
    childDevice?.sendEvent(name: "switch", value: 'off', descriptionText: "Resume", isStateChange: true, displayed: true)
    
    parent.send_resume()
}

