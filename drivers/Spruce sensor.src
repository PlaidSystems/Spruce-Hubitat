/**
 *  Spruce Sensor -updated with SLP3 model number 3/2019
 *
 *  Copyright 2019 Plaid Systems
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 -------10/20/2015 Updates--------
 -Fix/add battery reporting interval to update
 -remove polling and/or refresh
 
 -------5/2017 Updates--------
 -Add fingerprints for SLP
 -add device health, check every 60mins + 2mins
 
 -------3/2019 Updates--------
 -Add fingerprints for SLP3
 -change device health from 62mins to 3 hours
^^^^^^^^^^^^ SmartThings Update Log ^^^^^^^^^^^^

 -------11/2019 Updates--------
 -port to hubitat

 */
 
metadata {
    definition (name: "Spruce Sensor", namespace: "plaidsystems", author: "Plaid Systems") {
        
        capability "Configuration"
        capability "Battery"
        capability "Relative Humidity Measurement"
        capability "Temperature Measurement"
        capability "Sensor"
        
        attribute "maxHum", "string"
        attribute "minHum", "string"
        attribute "interval", "number"
        attribute "update", "number"
        attribute "tempOffset", "number"
        
        command "resetHumidity"
        
        fingerprint profileId: "0104", inClusters: "0000,0001,0003,0402,0405", outClusters: "0003, 0019", manufacturer: "PLAID SYSTEMS", model: "PS-SPRZMS-01", deviceJoinName: "Spruce Sensor"
        fingerprint profileId: "0104", inClusters: "0000,0001,0003,0402,0405", outClusters: "0003, 0019", manufacturer: "PLAID SYSTEMS", model: "PS-SPRZMS-SLP1", deviceJoinName: "Spruce Sensor"
        fingerprint profileId: "0104", inClusters: "0000,0001,0003,0402,0405", outClusters: "0003, 0019", manufacturer: "PLAID SYSTEMS", model: "PS-SPRZMS-SLP3", deviceJoinName: "Spruce Sensor"
    }

    preferences {
        input "tempOffset", "number", title: "Temperature Offset", description: "Set temperature offset by this many degrees", range: "*..*", displayDuringSetup: false
        input "interval", "number", title: "Measurement Interval", description: "Set how often you would like to check soil moisture in minutes, 1-120 minutes (default: 10 minutes)", range: "1..120", defaultValue: 10, displayDuringSetup: false
      }    
}

def installed(){
    
}

//when device preferences are changed
def updated(){  
    log.debug "device updated"    
    sendEvent(name: 'update', value: 1, descriptionText: "Settings changed and will update at next report. Measure interval set to ${interval} mins")    
    sendEvent(name: 'interval', value: interval, descriptionText: "Interval updated")
    sendEvent(name: 'tempOffset', value: tempOffset, descriptionText: "tempOffset updated")
}

//parse events
def parse(String description) {
    log.debug "Parse description $description"      
    
    Map map = [:]    
   
    if (description?.startsWith('catchall:')) {
        map = parseCatchAllMessage(description)
    }
    else if (description?.startsWith('read attr -')) {
        map = parseReportAttributeMessage(description)
    }    
    else if (description?.startsWith('temperature: ') || description?.startsWith('humidity: ')) {
        map = parseCustomMessage(description)
    }
    def result = map ? createEvent(map) : null
    
    //check in configuration change    
    if (device.latestValue('update') != 0){
        sendEvent(name: 'update', value: 0, descriptionText: "Update interval")
        result = poll()
    }    
        
    log.debug "parse: result: $result"
    return result    
}



private Map parseCatchAllMessage(String description) {
    Map resultMap = [:]
    def linkText = getLinkText(device)
    
    def descMap = zigbee.parse(description)
    def descMapParse = zigbee.parseDescriptionAsMap(description)
    
    log.debug "parseCatchAllMessage: descMapParse -> ${descMapParse}"
    log.debug "parseCatchAllMessage: descMap -> ${descMap}"
    
    //check humidity configuration is complete
    if (descMap.command == 0x07 && descMap.clusterId == 0x0405){
        sendEvent(name: 'update', value: 0, descriptionText: "Update interval")
        log.debug "config complete"
    }
    else if (descMap.command == 0x0001){    
        def hexString = "${hex(descMap.data[5])}" + "${hex(descMap.data[4])}"
        def intString = Integer.parseInt(hexString, 16)
    
        if (descMap.clusterId == 0x0402){       
            def value = getTemperature(hexString)
            resultMap = getTemperatureResult(value)    
        }
        else if (descMap.clusterId == 0x0405){
            def value = Math.round(new BigDecimal(intString / 100)).toString()
            resultMap = getHumidityResult(value)

        }
        else return null
    }
    else return null 
    
    return resultMap
}    
    
private Map parseReportAttributeMessage(String description) {   
    def descMap = zigbee.parseDescriptionAsMap(description)
    def descMapParse = zigbee.parse(description)
    
    log.debug "Desc Map: $descMap"
    log.debug "Report Attributes"
 
    Map resultMap = [:]
    if (descMap.cluster == "0402" && descMap.attrId == "0000") {
        def value = getTemperature(descMap.value)
        resultMap = getTemperatureResult(value)    
    }
    if (descMap.cluster == "0405" && descMap.attrId == "0000") {
        def intString = Integer.parseInt(descMap.value, 16)    
        def value = Math.round(new BigDecimal(intString / 100)).toString()
        resultMap = getHumidityResult(value)        
    }
    
    if (descMap.cluster == "0001" && descMap.attrId == "0000") {        
        resultMap = getBatteryResult(descMap.value)
    }    
    return resultMap
}

def parseDescriptionAsMap(description) {
    (description - "read attr - ").split(",").inject([:]) { map, param ->
        def nameAndValue = param.split(":")
        map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]
    }
}

private Map parseCustomMessage(String description) {
    Map resultMap = [:]  
        
    log.debug "parseCustom"
    if (description?.startsWith('temperature: ')) {
        def value = zigbee.parseHATemperatureValue(description, "temperature: ", getTemperatureScale())
        resultMap = getTemperatureResult(value)
    }
    else if (description?.startsWith('humidity: ')) {
        def pct = (description - "humidity: " - "%").trim()
        if (pct.isNumber()) {           
            def value = Math.round(new BigDecimal(pct)).toString()
            resultMap = getHumidityResult(value)
        } else {
            log.error "invalid humidity: ${pct}"
        }    
    }
    return resultMap
}
 
private Map getHumidityResult(value) {
    def linkText = getLinkText(device)
    def maxHumValue = 0
    def minHumValue = 0
    if (device.currentValue("maxHum") != null) maxHumValue = device.currentValue("maxHum").toInteger()
    if (device.currentValue("minHum") != null) minHumValue = device.currentValue("minHum").toInteger()
    log.debug "Humidity max: ${maxHumValue} min: ${minHumValue}"
    def compare = value.toInteger()
    
    if (compare > maxHumValue) {
        sendEvent(name: 'maxHum', value: value, unit: '%', descriptionText: "${linkText} soil moisture high is ${value}%")
        }
    else if (((compare < minHumValue) || (minHumValue <= 2)) && (compare != 0)) {
        sendEvent(name: 'minHum', value: value, unit: '%', descriptionText: "${linkText} soil moisture low is ${value}%")
        }    
    
    return [
        name: 'humidity',
        value: value,
        unit: '%',
        descriptionText: "${linkText} soil moisture is ${value}%"
    ]
}



def getTemperature(value) {
    def celsius = (Integer.parseInt(value, 16).shortValue()/100)
    //log.debug "Report Temp $value : $celsius C"
    //if(getTemperatureScale() == "C"){
    //  return celsius
    //} else {
        return celsiusToFahrenheit(celsius) as Integer
    //}
}

private Map getTemperatureResult(value) {
    log.debug "Temperature: $value"
    def linkText = getLinkText(device)
        
    if (tempOffset) {
        def offset = tempOffset as int
        def v = value as int
        value = v + offset        
    }
    def descriptionText = "${linkText} is ${value}Â°${temperatureScale}"
    return [
        name: 'temperature',
        value: value,
        descriptionText: descriptionText,
        unit: temperatureScale
    ]
}

private Map getBatteryResult(value) {
    log.debug 'Battery'
    def linkText = getLinkText(device)
        
    def result = [
        name: 'battery'
    ]
        
    def min = 2500   
    def percent = ((Integer.parseInt(value, 16) - min) / 5)
    percent = Math.max(0, Math.min(percent, 100.0))
    result.value = Math.round(percent)
    
    def descriptionText
    if (percent < 10) result.descriptionText = "${linkText} battery is getting low $percent %."
    else result.descriptionText = "${linkText} battery is ${result.value}%"
    
    return result
}

def resetHumidity(){
    def linkText = getLinkText(device)
    def minHumValue = 0
    def maxHumValue = 0
    sendEvent(name: 'minHum', value: minHumValue, unit: '%', descriptionText: "${linkText} min soil moisture reset to ${minHumValue}%")
    sendEvent(name: 'maxHum', value: maxHumValue, unit: '%', descriptionText: "${linkText} max soil moisture reset to ${maxHumValue}%")
}   

//poll
def poll() {
    log.debug "poll called"
    List cmds = []
    
    if (device.latestValue('update') == 2) cmds += configure()
        
    cmds += intervalUpdate()
    log.debug "commands $cmds"
    return cmds?.collect { new hubitat.device.HubAction(it) }    
}

//update intervals
def intervalUpdate(){
    log.debug "intervalUpdate"
    def minReport = 10
    def maxReport = 610
    if (interval != null) {
        minReport = interval
        maxReport = interval * 61
    }
    [    
        "zcl global send-me-a-report 0x405 0x0000 0x21 $minReport $maxReport {6400}", "delay 1000",
        "send 0x${device.deviceNetworkId} 1 1", "delay 1000",
        "zcl global send-me-a-report 1 0x0000 0x21 0x0C 0 {0500}", "delay 1000",
        "send 0x${device.deviceNetworkId} 1 1", "delay 1000",
    ]
}

def refresh() {
    log.debug "refresh"
    [
        "he rattr 0x${device.deviceNetworkId} 1 0x402 0", "delay 500",
        "he rattr 0x${device.deviceNetworkId} 1 0x405 0", "delay 500",    
        "he rattr 0x${device.deviceNetworkId} 1 1 0"
    ]    
}

//configure
def configure() {
    //set minReport = measurement in minutes
    def minReport = 10
    def maxReport = 610
    log.debug "zigbeeId ${device.zigbeeId}"
    if (!device.zigbeeId) sendEvent(name: 'update', value: 2, descriptionText: "Device Zigbee Id not found, remove and attempt to rejoin device")
    else sendEvent(name: 'update',value: 0, descriptionText: "Configuration initialized")
    
    [
        "zdo bind 0x${device.deviceNetworkId} 1 1 0x402 {${device.zigbeeId}} {}", "delay 1000",
        "zdo bind 0x${device.deviceNetworkId} 1 1 0x405 {${device.zigbeeId}} {}", "delay 1000",                
        "zdo bind 0x${device.deviceNetworkId} 1 1 1 {${device.zigbeeId}} {}", "delay 1000",
        
        //temperature
        "zcl global send-me-a-report 0x402 0x0000 0x29 1 0 {3200}",
        "send 0x${device.deviceNetworkId} 1 1", "delay 1000",
        
        //min = soil measure interval
        "zcl global send-me-a-report 0x405 0x0000 0x21 $minReport $maxReport {6400}",        
        "send 0x${device.deviceNetworkId} 1 1", "delay 1000",       
     
        //min = battery measure interval  1 = 1 hour     
        "zcl global send-me-a-report 1 0x0000 0x21 0x0C 0 {0500}",
        "send 0x${device.deviceNetworkId} 1 1", "delay 1000"
    ] + refresh()
}

private hex(value) {
    new BigInteger(Math.round(value).toString()).toString(16)
}

private String swapEndianHex(String hex) {
    reverseArray(hex.decodeHex()).encodeHex()
}

private byte[] reverseArray(byte[] array) {
    int i = 0;
    int j = array.length - 1;
    byte tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
    return array
}
